#! /usr/bin/env bash

divider="============"
exit="Exit"
back="Back"
refresh="Refresh"
scan="Scanning...."

function echoinfo() {
    echo -en "$1\0info\x1f$2\n"
}
function spawn() {
    coproc "$@" >/dev/null

}
function is_discoverable() {
    if bluetoothctl show | grep -iq "Discoverable: yes"; then
        echo "Discoverable: ON"
        return 0
    fi

    echo "Discoverable: OFF"
    return 1
}
discoverable=$(is_discoverable)

function is_powered() {
    if bluetoothctl show | grep -iq "Powered: yes"; then
        echo "Powered: ON"
        return 0
    fi

    echo "Powered: OFF"
    return 1
}
powered=$(is_powered)

function is_scanning() {
    if bluetoothctl show | grep -iq "Discovering: yes"; then
        echo "Scanning: ON"
        return 0
    fi

    echo "Scanning: OFF"
    return 1
}
scanning=$(is_scanning)

function is_pairable() {
    if bluetoothctl show | grep -iq "Pairable: yes"; then
        echo "Pairable: ON"
        return 0
    fi

    echo "Pairable: OFF"
    return 1
}
pairable=$(is_pairable)

function print_devices() {
    devices=$(bluetoothctl devices | cut -d ' ' -f3-)
    while read -r line; do
        echoinfo "$line" "$line"
    done <<<"$devices"
}

function menu_state() {
    print_devices

    echo $divider
    echo "$refresh"
    echo $powered
    echo $discoverable
    echo $scanning
    echo $pairable
    echo $exit
}


function is_paired() {
    if bluetoothctl info "$1" | grep -iq "Paired: yes"; then
        echo "Paired: Yes"
        return 0
    fi
    echo "Paired: No"
    return 1
}

function is_connected() {
    if bluetoothctl info "$1" | grep -iq "Connected: yes"; then
        echo "Connected: Yes"
        return 0
    fi
    echo "Connected: No"
    return 1
}
function is_trusted() {
    if bluetoothctl info "$1" | grep -iq "Trusted: yes"; then
        echo "Trusted: Yes"
        return 0
    fi
    echo "Trusted: No"
    return 1
}

function toggle_pair() {
    if is_paired "$1" >>/dev/null; then
        bluetoothctl remove "$1" >>/dev/null
    else
        bluetoothctl pair "$1" >>/dev/null
    fi
}

function toggle_connect() {
    if is_connected "$1" >>/dev/null; then
        bluetoothctl disconnect "$1" >>/dev/null
    else
        bluetoothctl connect "$1" >>/dev/null
    fi
}

function toggle_trust() {
    if is_trusted "$1" >>/dev/null; then
        bluetoothctl untrust "$1" >>/dev/null
    else
        bluetoothctl trust "$1" >>/dev/null
    fi
}

function device_state() {
    device=$state
    mac=$(bluetoothctl devices | grep "$device" | awk '{print $2}')
    echo -en "\0prompt\x1f$device\n"

    paired=$(is_paired "$mac")
    connected=$(is_connected "$mac")
    trusted=$(is_trusted "$mac")

    echoinfo "$connected" "$device"
    echoinfo "$paired" $device
    echoinfo "$trusted" $device

    echoinfo $divider $device
    echoinfo "$refresh" $device

    echo $back
    echo $exit

    case $SEL in
        "$device" | $divider | $refresh)
            return 0
            ;;
        "$paired")
            toggle_pair "$mac"
            return 0
            ;;
        "$connected")
            toggle_connect "$mac"
            return 0
            ;;
        "$trusted")
            toggle_trust "$mac"
            return 0
            ;;
    esac
}

toggle_scan() {
    if is_scanning >> /dev/null; then
        kill $(pgrep -f "bluetoothctl scan on")
        bluetoothctl scan off >> /dev/null
    else
        bluetoothctl scan on >> /dev/null &
    fi
}

function main() {
    # echo $@ test
    SEL="$*"
    RET=$ROFI_RETV
    state=$ROFI_INFO

    echo -en "\0prompt\x1fBluetooth\n"

    # echo $state
    if [[ "$state" == "" ]]; then
        case "$SEL" in
            "$exit")
                exit 0
                ;;
            "$scanning")
                toggle_scan
                echo $back
                ;;
            *)
                menu_state
                ;;
        esac
    else
        device_state $SEL
    fi
}

main $@
