#! /usr/bin/env bash

divider="============"
exit="Exit"
back="Back"
refresh="Refresh"
scan="Scanning...."

function echo_nonselectable() {
    echo -en "$1\0nonselectable\x1ftrue\n"
}

function echoinfo() {
    echo -en "$1\0info\x1f$2\n"
}
function tm() {
    timeout 10 "$@" >/dev/null
}


function select_line() {
    echo -en "\0active\x1f$1\n"
}

function is_discoverable() {
    if bluetoothctl show | grep -iq "Discoverable: yes"; then
        echo "Discoverable: ON"
        return 0
    fi

    echo "Discoverable: OFF"
    return 1
}

function is_powered() {
    if bluetoothctl show | grep -iq "Powered: yes"; then
        echo "Powered: ON"
        return 0
    fi

    echo "Powered: OFF"
    return 1
}

function is_scanning() {
    if bluetoothctl show | grep -iq "Discovering: yes"; then
        echo "Scanning: ON"
        return 0
    fi

    echo "Scanning: OFF"
    return 1
}

function is_pairable() {
    if bluetoothctl show | grep -iq "Pairable: yes"; then
        echo "Pairable: ON"
        return 0
    fi

    echo "Pairable: OFF"
    return 1
}

function print_devices() {
    devices=$(bluetoothctl devices | cut -d ' ' -f3-)
    while read -r line; do
        d_mac=$(bluetoothctl devices | grep "$line" | awk '{print $2}')
        echoinfo "    $line" "device;;$line"


        i=$((i+1))
        if is_connected "$d_mac" > /dev/null; then
           select_line $i
        fi
    done <<<"$devices"
}

function is_paired() {
    if bluetoothctl info "$1" | grep -iq "Paired: yes"; then
        echo "Paired: Yes"
        return 0
    fi
    echo "Paired: No"
    return 1
}

function is_connected() {
    if bluetoothctl info "$1" | grep -iq "Connected: yes"; then
        echo "Connected: Yes"
        return 0
    fi
    echo "Connected: No"
    return 1
}
function is_trusted() {
    if bluetoothctl info "$1" | grep -iq "Trusted: yes"; then
        echo "Trusted: Yes"
        return 0
    fi
    echo "Trusted: No"
    return 1
}

function toggle_pair() {
    if is_paired "$1" >>/dev/null; then
        tm bluetoothctl remove "$1" >>/dev/null
    else
        tm bluetoothctl pair "$1" >>/dev/null
    fi
}

function toggle_connect() {
    if is_connected "$1" >>/dev/null; then
        tm bluetoothctl disconnect "$1" >>/dev/null
    else
        tm bluetoothctl connect "$1" >>/dev/null
    fi
}

function toggle_trust() {
    if is_trusted "$1" >>/dev/null; then
        tm bluetoothctl untrust "$1" >>/dev/null
    else
        tm bluetoothctl trust "$1" >>/dev/null
    fi
}

function device_state() {
    device=$(echo $ROFI_INFO | cut -d ';' -f3)
    action=$(echo $ROFI_INFO | cut -d ';' -f2)
    mac=$(bluetoothctl devices | grep "$device" | awk '{print $2}')

    case $action in
        "pair")
            toggle_pair "$mac"
            ;;
        "connect")
            toggle_connect "$mac"
            ;;
        "trust")
            toggle_trust "$mac"
            ;;
    esac

    echo -en "\0prompt\x1f$device\n"

    connected=$(is_connected "$mac")
    paired=$(is_paired "$mac")
    trusted=$(is_trusted "$mac")

    echo_nonselectable "Control: "
    echoinfo "    $connected" "device;connect;$device"
    echoinfo "    $paired" "device;pair;$device"
    echoinfo "    $trusted" "device;trust;$device"

    # echoinfo $divider "device;;$device"
    echoinfo "$refresh" "device;;$device"

    echo $back
    echo $exit
}

function toggle_scan() {
    if is_scanning >>/dev/null; then
        kill $(pgrep -f "bluetoothctl scan on")
        tm bluetoothctl scan off >>/dev/null
    else
        tm bluetoothctl scan on >>/dev/null &
    fi
}

function toggle_discoverable() {
    if is_discoverable >>/dev/null; then
        tm bluetoothctl discoverable off >>/dev/null
    else
        tm bluetoothctl discoverable on >>/dev/null
    fi
}

function toggle_powered() {
    if is_powered >>/dev/null; then
        tm bluetoothctl power off >>/dev/null
    else
        tm bluetoothctl power on >>/dev/null
    fi
}

function toggle_pairable() {
    if is_pairable >>/dev/null; then
        tm bluetoothctl pairable off >>/dev/null
    else
        tm bluetoothctl pairable on >>/dev/null
    fi
}

function menu_state() {

    action=$(echo $ROFI_INFO | cut -d ';' -f2)

    case "$action" in
        "exit")
            exit 0
            ;;
        "scan")
            toggle_scan
            ;;
        "discover")
            toggle_discoverable
            ;;
        "power")
            toggle_powered
            ;;

        "pair")
            toggle_pairable
            ;;
    esac

    discoverable=$(is_discoverable)
    powered=$(is_powered)
    scanning=$(is_scanning)
    pairable=$(is_pairable)

    echo_nonselectable "Devices: "
    print_devices
    # echoinfo "$divider" "menu;divider"
    echoinfo "$refresh" "menu;refresh"
    echoinfo "$powered" "menu;power"
    echoinfo "$discoverable" "menu;discover"
    echoinfo "$scanning" "menu;scan"
    echoinfo "$pairable" "menu;pair"
    echoinfo "$exit" "menu;exit"
}

function main() {
    # echo $@ test
    SEL="$*"
    RET=$ROFI_RETV

    # ROFI_INFO stores the information about the state of the app
    # see rofi-script(5)
    # {ROFI_INFO} = {state};{action};{other_info}
    # echoinfo is used to store the action/ state when the user selects an option
    # echoinfo {option_content} {ROFI_INFO}

    state=$(echo $ROFI_INFO | cut -d ';' -f1)

    echo -en "\0prompt\x1fBluetooth\n"

    if [[ "$state" == "" || "$state" == "menu" ]]; then
        menu_state
    elif [[ "$state" == "device" ]]; then
        device_state $SEL
    fi
}

main $@
