#!/usr/bin/env bash
#

# echo "Default source"
# ponymix defaults | sed -n 2p
# echo "Default sink"
# ponymix defaults | sed -n 5p

# echo "Sinks"
# ponymix -t source list | grep -vi 'source\|Avg'

# echo "Sources"
# ponymix -t source list | grep -vi 'source\|Avg'

function default_sink() {
    ponymix defaults | sed -n 2p
}

function default_source() {
    ponymix defaults | sed -n 5p
}

function get_sources() {
    ponymix list-short | grep source | grep -iv "monitor\|output" | tr -s '\t' | cut -d$'\t' -f4- | grep '\S'
}

function get_sinks() {
    ponymix list-short | grep sink | grep -iv "input" | tr -s '\t' | cut -d$'\t' -f4- | grep '\S'
}
function is_default() {
    ponymix defaults | grep -q "$1"
    if [ $? -eq 0 ]; then
        echo "true"
        return 0
    else
        echo "false"
        return 1
    fi
}

function get_id() {
    ponymix list-short | grep "$2" | grep "$1" | awk '{print $2}'
}

function get_volume() {
    pactl "get-$2-volume" "$1" | head -1 | cut -d "/" -f2 | xargs
}

function echoinfo() {
    echo -en "$1\0info\x1f$2\n"
}

function select_line() {
    echo -en "\0active\x1f$1\n"
}

function echo_nonselectable() {
    echo -en "$1\0nonselectable\x1ftrue\n"
}

function set_status() {
    echo -en "\0message\x1f$1\n"
}

function main_menu() {
    echo -en "\0prompt\x1fAudio devices\n"
    echoinfo "Sinks (Speakers/Headphones) >" "sinks;;"
    echoinfo "Sources (Microphones) >" "sources;;"
}

function sources_menu() {
    echo -en "\0prompt\x1fSource menu\n"
    echo_nonselectable "Sources: "

    SOURCES=$(get_sources)

    while read -r line; do
        echoinfo "    $line" "source_device;;$line"
        i=$((i + 1))
        is_default "$line" >/dev/null && select_line "$i"
    done <<<"$SOURCES"
    select_line "$LINE"
    echoinfo "Back" "main"
}

function sinks_menu() {

    echo -en "\0prompt\x1fSink menu\n"
    echo_nonselectable "Sinks:"

    SINKS=$(get_sinks)

    while read -r line; do
        echoinfo "    $line" "sink_device;;$line"
        i=$((i + 1))
        is_default "$line" >/dev/null && select_line "$i"
    done <<<"$SINKS"

    select_line "$LINE"
    echoinfo "Back" "main"
}

function sink_device() {
    echo -en "\0prompt\x1f$device\n"
    ID=$(get_id "$device" 'sink')
    VOLUME=$(get_volume "$ID" 'sink')
    set_status "Volume: $VOLUME  Default: $(is_default "$device")"


    echo_nonselectable "Control:"
    echoinfo "    Set Default" "sink_device;default;$device"
    echoinfo "    Mute" "sink_device;mute;$device"
    echoinfo "    + volume" "sink_device;increase;$device"
    echoinfo "    - volume" "sink_device;decrease;$device"
    echoinfo "Back" "sinks"
}

function source_device(){

    echo -en "\0prompt\x1f$device\n"
    ID=$(get_id "$device" 'source')
    VOLUME=$(get_volume "$ID" 'source')
    set_status "Volume: $VOLUME  Default: $(is_default "$device")"


    echo_nonselectable "Control:"
    echoinfo "    Set Default" "source_device;default;$device"
    echoinfo "    Mute" "source_device;mute;$device"
    echoinfo "    + volume" "source_device;increase;$device"
    echoinfo "    - volume" "source_device;decrease;$device"
    echoinfo "Back" "sources"
}

function main() {

    # ROFI_INFO stores the information about the state of the app
    # see rofi-script(5)
    # {ROFI_INFO} = {state};{action};{other_info}
    # echoinfo is used to store the action/ state when the user selects an option
    # echoinfo {option_content} {ROFI_INFO}

    state=$(echo $ROFI_INFO | cut -d ';' -f1)
    action=$(echo $ROFI_INFO | cut -d ';' -f2)
    device=$(echo $ROFI_INFO | cut -d ';' -f3)

    set_status ""
    if [[ "$state" == "sources" ]]; then
        sources_menu
    elif [[ "$state" == "sinks" ]]; then
        sinks_menu
    elif [[ "$state" == "sink_device" ]]; then
        sink_device
    elif [[ "$state" == "source_device" ]]; then
        source_device
    else
        main_menu
    fi
}

main "$@"
