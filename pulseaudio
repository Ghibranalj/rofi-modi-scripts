#!/usr/bin/env bash
#

VOLUME_STEP=5

echoerr() { echo "$@" 1>&2; }

function default_sink() {
    # ponymix defaults | sed -n 2p
    local DEF=$(pactl get-default-sink)
    ponymix list-short | grep -e "^sink\s" | grep "$DEF" | awk -F'\t' '{print $4}'
}

function default_source() {
    local DEF=$(pactl get-default-source)
    ponymix list-short | grep -e "^source\s" | grep "$DEF" | awk -F'\t' '{print $4}'
}

function get_sources() {
    ponymix list-short | grep -e '^source\s' | grep -iv 'monitor' | awk -F'\t' '{print $4}'
}

function get_sinks() {
    ponymix list-short | grep -e '^sink\s' | awk -F'\t' '{print $4}'
}

function get_playback() {
    ponymix list-short | grep -e '^sink-input\s' | awk -F'\t' '{print $4}'
}

# TODO This is not specific enough to be useful.
function is_default() {

    DEF=$(default_$2)
    # echo $DEF $1
    if [[ "*$DEF*" == "*$1*" ]]; then
        echo "Default: yes"
        return 0
    else
        echo "Default: no"
        return 1
    fi
}

function get_name() {
    ponymix list-short | grep -i "$1" | grep -e "^$2\s" | grep -iv "monitor" |
        awk -F '\t' '{print $3}'
}

function set_default() {
    NAME=$(get_name "$1" "$2")
    # echo $NAME
    pactl "set-default-$2" "$NAME"
}

function toggle_mute() {
    pactl "set-$2-mute" "$1" toggle
}

function get_muted() {
    pactl "get-$2-mute" "$1"
    # echo test
}

function get_id() {
    ponymix list-short | grep "$2" | grep "$1" | awk '{print $2}'
}

function get_volume() {
    pactl "get-$2-volume" "$1" | head -1 | cut -d "/" -f2 | xargs
}

function increase_volume() {
    pactl "set-$2-volume" "$1" "+$VOLUME_STEP%"
}

function decrease_volume() {
    pactl "set-$2-volume" "$1" "-$VOLUME_STEP%"
}

function echoinfo() {
    echo -en "$1\0info\x1f$2\n"
}

function select_line() {
    echo -en "\0active\x1f$1\n"
}

function echo_nonselectable() {
    echo -en "$1\0nonselectable\x1ftrue\n"
}

function set_status() {
    echo -en "\0message\x1f$1\n"
}

function main_menu() {
    echo -en "\0prompt\x1fAudio devices\n"

    echoinfo "Sinks (Speakers/Headphones) >" "sinks;;"
    echoinfo "Sources (Microphones) >" "sources;;"
}


function sources_menu() {
    echo -en "\0prompt\x1fSource menu\n"
    echo_nonselectable "Sources: "

    SOURCES=$(get_sources)

    while read -r line; do
        echoinfo "    $line" "source_device;;$line"
        i=$((i + 1))
        is_default "$line" 'source' >>/dev/null && select_line "$i"
    done <<<"$SOURCES"

    echoinfo "Back" "main"
}

function sinks_menu() {

    echo -en "\0prompt\x1fSink menu\n"
    echo_nonselectable "Sinks:"

    SINKS=$(get_sinks)

    while read -r line; do
        echoinfo "    $line" "sink_device;;$line"

        i=$((i + 1))
        is_default "$line" 'sink' > /dev/null && select_line "$i" <<<"$SINKS"
    done <<<"$SINKS"
    echoinfo "Back" "main"

}

function sink_device() {
    echo -en "\0prompt\x1f$device\n"
    ID=$(get_id "$device" 'sink')

    case "$action" in
        "increase")
            increase_volume "$ID" "sink"
            ;;
        "decrease")
            decrease_volume "$ID" "sink"
            ;;
        "mute")
            toggle_mute "$ID" "sink"
            ;;
        "default")
            set_default "$ID" "sink"
            ;;
    esac

    # echo $ID
    VOLUME=$(get_volume "$ID" 'sink')
    set_status "Volume: $VOLUME $(is_default "$device" 'sink')  $(get_muted "$ID" "sink")"

    echo_nonselectable "Control:"
    echoinfo "    Set Default" "sink_device;default;$device"
    echoinfo "    Mute" "sink_device;mute;$device"
    echoinfo "    + volume" "sink_device;increase;$device"
    echoinfo "    - volume" "sink_device;decrease;$device"
    echoinfo "Back" "sinks"
}

function source_device() {

    echo -en "\0prompt\x1f$device\n"
    ID=$(get_id "$device" 'source')

    case "$action" in
        "increase")
            increase_volume "$ID" "source"
            ;;
        "decrease")
            decrease_volume "$ID" "source"
            ;;
        "mute")
            toggle_mute "$ID" "source"
            ;;
        "default")
            set_default "$ID" 'source'
            ;;
    esac

    VOLUME=$(get_volume "$ID" 'source')
    set_status "Volume: $VOLUME $(is_default "$device" 'source')  $(get_muted "$ID" "source")"

    echo_nonselectable "Control:"
    echoinfo "    Set Default" "source_device;default;$device"
    echoinfo "    Mute" "source_device;mute;$device"
    echoinfo "    + volume" "source_device;increase;$device"
    echoinfo "    - volume" "source_device;decrease;$device"
    echoinfo "Back" "sources"
}

function main() {

    # ROFI_INFO stores the information about the state of the app
    # see rofi-script(5)
    # {ROFI_INFO} = {state};{action};{other_info}
    # echoinfo is used to store the action/ state when the user selects an option
    # echoinfo {option_content} {ROFI_INFO}

    state=$(echo $ROFI_INFO | cut -d ';' -f1)
    action=$(echo $ROFI_INFO | cut -d ';' -f2)
    device=$(echo $ROFI_INFO | cut -d ';' -f3)

    set_status ""
    if [[ "$state" == "sources" ]]; then
        sources_menu
    elif [[ "$state" == "sinks" ]]; then
        sinks_menu
    elif [[ "$state" == "sink_device" ]]; then
        sink_device
    elif [[ "$state" == "source_device" ]]; then
        source_device
    else
        main_menu
    fi
}

main "$@"
